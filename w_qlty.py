# Projekt: Vorhersage der Weinqualit√§t (Ordinal Classification)
# -----------------------------------------------------------------------------

# 1. Bibliotheken laden
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
import streamlit as st

from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.preprocessing import LabelEncoder
from xgboost import XGBClassifier

# 2. Modell und LabelEncoder laden
model = joblib.load("wine_quality_model_xgb.pkl")
le = LabelEncoder()
y_sample = pd.read_csv("train.csv")["quality"].astype(int)
le.fit(y_sample)

# 3. Streamlit App
# ----------------------------------
# streamlit run w_qlty.py

st.set_page_config(page_title="Weinqualit√§ts-Vorhersage", layout="wide")
st.title("üç∑ Weinqualit√§ts-Vorhersage")
st.write("Diese App sagt die **Qualit√§tsstufe** eines Weins anhand seiner chemischen Merkmale vorher.")

st.subheader("üßæ Eingabedaten")

# Beispiel-Merkmale mit Tooltips (per Hover √ºber Info-Icon)
columns = {
    'fixed acidity': 'Gesamts√§uregehalt (z.‚ÄØB. Weins√§ure, √Ñpfels√§ure etc.)',
    'volatile acidity': 'Fl√ºchtige S√§uren (z.‚ÄØB. Essigs√§ure) ‚Äì hoher Wert = schlechter',
    'citric acid': 'Zitronens√§ure ‚Äì tr√§gt zur Frische bei',
    'residual sugar': 'Unvergorener Zucker ‚Äì s√º√üer Geschmack bei h√∂herem Wert',
    'chlorides': 'Salzgehalt ‚Äì hoher Wert kann negativ sein',
    'free sulfur dioxide': 'Ungebundener Schwefel ‚Äì sch√ºtzt vor Oxidation',
    'total sulfur dioxide': 'Gesamtschwefel ‚Äì zu viel kann unangenehm sein',
    'density': 'Dichte ‚Äì kann Hinweise auf Zucker- oder Alkoholgehalt geben',
    'pH': 'S√§uregrad ‚Äì niedriger pH = saurer Wein',
    'sulphates': 'Sulfate ‚Äì konservierend und geschmacklich relevant',
    'alcohol': 'Alkoholgehalt in Volumenprozent'
}

inputs = {}
cols = st.columns(len(columns))
example_data = pd.read_csv("train.csv")
max_values = example_data[list(columns.keys())].max().to_dict()

for i, (col, tooltip) in enumerate(columns.items()):
    max_val = float(max_values[col]) + 1
    label = f"{col}"
    with cols[i]:
        if "sugar" in col or "sulfur" in col or "chloride" in col:
            inputs[col] = st.number_input(label, min_value=0.0, max_value=max_val, step=0.01, value=float(example_data[col].median()), help=tooltip)
        elif "density" in col:
            inputs[col] = st.number_input(label, min_value=0.0, max_value=10.0, step=0.01, value=float(example_data[col].median()), help=tooltip)
        else:
            inputs[col] = st.slider(label, float(example_data[col].min()), float(max_val), float(example_data[col].median()), help=tooltip)

input_df = pd.DataFrame([inputs])

st.write("\n", input_df)

# Vorhersage
prediction = model.predict(input_df)
quality = le.inverse_transform(prediction)[0]

st.subheader("üìä Vorhergesagte Weinqualit√§t")

if quality <= 4:
    st.error(f"üç∑ Die vorhergesagte Qualit√§t ist: {quality} (schlecht)")
elif quality >= 7:
    st.success(f"üç∑ Die vorhergesagte Qualit√§t ist: {quality} (gut)")
else:
    st.info(f"üç∑ Die vorhergesagte Qualit√§t ist: {quality} (mittelm√§√üig)")

# Footer
st.markdown("""
---
Made with ‚ù§Ô∏è by Emr7y | Modell: XGBoost | Datenquelle: Kaggle
""")
